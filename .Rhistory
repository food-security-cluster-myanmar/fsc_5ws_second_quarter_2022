title = "Age and sex of reached beneficiaries",
subtitle = "Only 'real' values included") +
theme(legend.position = "none")
fsc_disagg %>%
filter(new_beneficiaries > 0) %>%
mutate(pc_disagg = ben_sub / beneficiaries) %>%
group_by(org_code, disagg) %>%
mutate(mean = mean(pc_disagg),
sd = sd(pc_disagg, na.rm = TRUE),
ben_sub = sum(ben_sub, na.rm = TRUE)) %>%
mutate(cat = ifelse(sd >= .05, "real", "fake"),
cat = ifelse(is.na(cat), "real", cat)) %>%
ungroup() %>%
filter(cat == "real") %>%
group_by(disagg) %>%
summarise(ben_sub = sum(ben_sub)) %>%
mutate(pc = ben_sub / sum(ben_sub),
disagg = fct_relevel(disagg,
c("child_male", "child_female",
"adult_male", "adult_female",
"elderly_male", "elderly_female"))) %>%
ggplot(aes(x = disagg, y = pc, fill = disagg)) +
geom_col() +
geom_text(aes(label = percent(pc, accuracy = .1)), vjust = -.1) +
scale_y_continuous(labels = percent(accuracy = 1)) +
labs(x = "Disaggregation group",
y = "Percentage of all beneficiaries",
title = "Age and sex of reached beneficiaries",
subtitle = "Only 'real' values included") +
theme(legend.position = "none")
fsc_disagg %>%
filter(new_beneficiaries > 0) %>%
mutate(pc_disagg = ben_sub / beneficiaries) %>%
group_by(org_code, disagg) %>%
mutate(mean = mean(pc_disagg),
sd = sd(pc_disagg, na.rm = TRUE),
ben_sub = sum(ben_sub, na.rm = TRUE)) %>%
mutate(cat = ifelse(sd >= .05, "real", "fake"),
cat = ifelse(is.na(cat), "real", cat)) %>%
ungroup() %>%
filter(cat == "real") %>%
group_by(disagg) %>%
summarise(ben_sub = sum(ben_sub)) %>%
mutate(pc = ben_sub / sum(ben_sub),
disagg = fct_relevel(disagg,
c("child_male", "child_female",
"adult_male", "adult_female",
"elderly_male", "elderly_female"))) %>%
ggplot(aes(x = disagg, y = pc, fill = disagg)) +
geom_col() +
geom_text(aes(label = percent(pc, accuracy = .1)), vjust = -.1) +
scale_y_continuous(labels = percent_format(accuracy = 1)) +
labs(x = "Disaggregation group",
y = "Percentage of all beneficiaries",
title = "Age and sex of reached beneficiaries",
subtitle = "Only 'real' values included") +
theme(legend.position = "none")
fsc %>%
select(date, org_code, beneficiaries = new_beneficiaries, location, admin3_pcode) %>%
rbind(fsc_2021 %>%
filter(unique_beneficiaries == "Yes") %>%
select(date, org_code, beneficiaries, location, admin3_pcode)) %>%
group_by(location, admin3_pcode) %>%
slice(which.max(beneficiaries)) %>%
group_by(org_code, year = year(date)) %>%
summarise(beneficiaries = sum(beneficiaries)) %>%
pivot_wider(names_from = year, values_from = beneficiaries, names_prefix = "ben_") %>%
rowwise() %>%
mutate(total_ben = sum(ben_2021, ben_2022, na.rm = TRUE)) %>%
ungroup() %>%
mutate(rank_2021 = dense_rank(-ben_2021),
rank_2022 = dense_rank(-ben_2022)) %>%
arrange(desc(ben_2022)) %>%
select(org_code, ben_2021, rank_2021, ben_2022, rank_2022, total_ben) %>%
head(15) %>%
kable(caption = "Top implementing partners by beneficiaries reached in 2022 (Q1 & Q2)", format.args = list(big.mark = ",")) %>%
kable_classic_2("striped")
fsc %>%
mutate(evidence = case_when(evidence %in% c("0.97",
"98% of HH have Acceptable FCS",
"99% of households have acceptable FCS") ~
"Acceptable FCS",
evidence %in% c("PDM report", "Post Distribution Monitoring") ~
"Post-distribution monitoring",
str_detect(evidence, "consumption|intake") ~ "Acceptable FCS",
evidence %in% c("Provision/Support Report", "MDR") ~
"Regular reporting",
is.na(evidence) ~ "No evidence",
TRUE ~ evidence),
evidence = fct_relevel(evidence, "No evidence", after = Inf)) %>%
group_by(evidence) %>%
summarise(beneficiaries = sum(new_beneficiaries)) %>%
mutate(`%_beneficiaries` = round(beneficiaries / sum(beneficiaries) * 100, digits = 2)) %>%
arrange(desc(beneficiaries)) %>%
kable(caption = "Evidence of food insecurity status in Q1 & Q2 2022",
format.args = list(big.mark = ",")) %>%
kable_classic_2("striped", full_width = FALSE)
partner_top <- fsc %>%
sum_ben(org_code) %>% arrange(desc(beneficiaries)) %>%  mutate(org_code = reorder(org_code, -beneficiaries)) %>% pull(org_code) %>% head(12)
fsc %>%
filter(org_code %in% partner_top) %>%
select(date, org_code, beneficiaries = new_beneficiaries, location, admin3_pcode) %>%
rbind(fsc_2021 %>%
filter(unique_beneficiaries == "Yes") %>%
filter(org_code %in% partner_top) %>%
select(date, org_code, beneficiaries, location, admin3_pcode)) %>%
group_by(location, admin3_pcode) %>%
slice(which.max(beneficiaries)) %>%
group_by(org_code) %>%
arrange(date) %>%
mutate(cum_ben = cumsum(beneficiaries)) %>%
ggplot(aes(x = date, y = cum_ben)) +
geom_step(size = 0.5) +
scale_x_date(date_breaks = "1 month", date_labels = "%b%y") +
scale_y_continuous(labels = comma) +
geom_vline(colour = "red", lty = 2, xintercept = as.numeric(as.Date("2021-06-01")), alpha = .5) +
geom_vline(colour = "red", lty = 2, xintercept = as.numeric(as.Date("2022-01-01")), alpha = .5) +
facet_wrap(~ fct_rev(fct_reorder(org_code, cum_ben, max)), scales = "free_y") +
theme(legend.position = "none",
axis.text.x = element_text(size = 4, angle = 60, hjust = 1, vjust = 1),
axis.text.y = element_text(size = 4),
strip.text = element_text(size = 7, face = "bold"),
strip.background = element_rect(fill = "#212121"),
plot.title = element_text(size = 11)) + # see if this works when you knit, then do it for the other plots
labs(x = "Month",
y = "Cumulative beneficiaries",
title = "Monthly progress of top 20 implementing partners, 2021 - 2022 (Q2)",
subtitle = "Figures show cumulative unique beneficiaries")
fsc %>%
filter(org_code %in% partner_top) %>%
select(date, org_code, beneficiaries = new_beneficiaries, location, admin3_pcode) %>%
rbind(fsc_2021 %>%
filter(unique_beneficiaries == "Yes") %>%
filter(org_code %in% partner_top) %>%
select(date, org_code, beneficiaries, location, admin3_pcode)) %>%
group_by(location, admin3_pcode) %>%
slice(which.max(beneficiaries)) %>%
group_by(org_code) %>%
arrange(date) %>%
mutate(cum_ben = cumsum(beneficiaries)) %>%
ggplot(aes(x = date, y = cum_ben)) +
geom_step(size = 0.5) +
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
scale_y_continuous(labels = comma) +
geom_vline(colour = "red", lty = 2, xintercept = as.numeric(as.Date("2021-06-01")), alpha = .5) +
geom_vline(colour = "red", lty = 2, xintercept = as.numeric(as.Date("2022-01-01")), alpha = .5) +
facet_wrap(~ fct_rev(fct_reorder(org_code, cum_ben, max)), scales = "free_y") +
theme(legend.position = "none",
axis.text.x = element_text(size = 4, angle = 60, hjust = 1, vjust = 1),
axis.text.y = element_text(size = 4),
strip.text = element_text(size = 7, face = "bold"),
strip.background = element_rect(fill = "#212121"),
plot.title = element_text(size = 11)) + # see if this works when you knit, then do it for the other plots
labs(x = "Month",
y = "Cumulative beneficiaries",
title = "Monthly progress of top 12 implementing partners, 2021 - 2022 (Q2)",
subtitle = "Figures show cumulative unique beneficiaries")
fsc %>%
filter(org_code %in% partner_top) %>%
select(date, org_code, beneficiaries = new_beneficiaries, location, admin3_pcode) %>%
rbind(fsc_2021 %>%
filter(unique_beneficiaries == "Yes") %>%
filter(org_code %in% partner_top) %>%
select(date, org_code, beneficiaries, location, admin3_pcode)) %>%
group_by(location, admin3_pcode) %>%
slice(which.max(beneficiaries)) %>%
group_by(org_code) %>%
arrange(date) %>%
mutate(cum_ben = cumsum(beneficiaries)) %>%
ggplot(aes(x = date, y = cum_ben)) +
geom_step(size = 0.5) +
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
scale_y_continuous(labels = comma) +
geom_vline(colour = "red", lty = 2, xintercept = as.numeric(as.Date("2021-06-01")), alpha = .5) +
geom_vline(colour = "red", lty = 2, xintercept = as.numeric(as.Date("2022-01-01")), alpha = .5) +
facet_wrap(~ fct_rev(fct_reorder(org_code, cum_ben, max)), scales = "free_y") +
theme(legend.position = "none",
axis.text.x = element_text(size = 4, angle = 60, hjust = 1, vjust = 1),
axis.text.y = element_text(size = 4),
strip.text = element_text(size = 7, face = "bold"),
strip.background = element_rect(fill = "#212121"),
plot.title = element_text(size = 11)) + # see if this works when you knit, then do it for the other plots
labs(x = "Month",
y = "Cumulative beneficiaries",
title = "Monthly progress of top 12 implementing partners, 2021 - 2022 (Q2)",
subtitle = "Figures show cumulative unique beneficiaries; first line is the IERP, second line is the start of 2022")
fsc %>%
filter(org_code %in% partner_top) %>%
select(date, org_code, beneficiaries = new_beneficiaries, location, admin3_pcode) %>%
rbind(fsc_2021 %>%
filter(unique_beneficiaries == "Yes") %>%
filter(org_code %in% partner_top) %>%
select(date, org_code, beneficiaries, location, admin3_pcode)) %>%
group_by(location, admin3_pcode) %>%
slice(which.max(beneficiaries)) %>%
group_by(org_code) %>%
arrange(date) %>%
mutate(cum_ben = cumsum(beneficiaries)) %>%
ggplot(aes(x = date, y = cum_ben)) +
geom_step(size = 0.5) +
scale_x_date(date_breaks = "6 months", date_labels = "%b%y") +
scale_y_continuous(labels = comma) +
geom_vline(colour = "red", lty = 2, xintercept = as.numeric(as.Date("2021-06-01")), alpha = .5) +
geom_vline(colour = "red", lty = 2, xintercept = as.numeric(as.Date("2022-01-01")), alpha = .5) +
facet_wrap(~ fct_rev(fct_reorder(org_code, cum_ben, max)), scales = "free_y") +
theme(legend.position = "none",
axis.text.x = element_text(size = 4, angle = 60, hjust = 1, vjust = 1),
axis.text.y = element_text(size = 4),
strip.text = element_text(size = 7, face = "bold"),
strip.background = element_rect(fill = "#212121"),
plot.title = element_text(size = 11)) + # see if this works when you knit, then do it for the other plots
labs(x = "Date",
y = "Cumulative beneficiaries",
title = "Monthly progress of top 12 implementing partners, 2021 - 2022 (Q2)",
subtitle = "Figures show cumulative unique beneficiaries; first line is the IERP, second line is the start of 2022")
fsc %>%
filter(quarter == "q1") %>%
group_by(admin3_pcode_old) %>%
summarise(beneficiaries = sum(new_beneficiaries)) %>%
right_join(pcode3_shape, by = c("admin3_pcode_old" = "admin3_pcode")) %>%
st_as_sf() %>%
ggplot() +
geom_sf(aes(fill = beneficiaries), size = .1) +
scale_fill_viridis(direction = -1, trans = "log10",
breaks = c(100, 1000, 10000, 100000, 500000),
labels = comma,
na.value = "gray90") +
theme_void() +
theme(legend.text = element_text(size = 10),
legend.title = element_text(size = 10),
legend.key.size = unit(.7, "cm"),
plot.background = element_rect(fill = "white", colour = "white")) +
labs(title = "Beneficiaries by township, as of 2022-03-31",
subtitle = "Townships in grey do not have any partners present",
fill = "Beneficiaries") +
fsc %>%
# filter(quarter == "q2") %>%
group_by(admin3_pcode_old) %>%
summarise(beneficiaries = sum(new_beneficiaries)) %>%
right_join(pcode3_shape, by = c("admin3_pcode_old" = "admin3_pcode")) %>%
st_as_sf() %>%
ggplot() +
geom_sf(aes(fill = beneficiaries), size = .1) +
scale_fill_viridis(direction = -1, trans = "log10",
breaks = c(100, 1000, 10000, 100000, 500000),
labels = comma,
na.value = "gray90") +
theme_void() +
theme(legend.text = element_text(size = 10),
legend.title = element_text(size = 10),
legend.key.size = unit(.7, "cm"),
plot.background = element_rect(fill = "white", colour = "white")) +
labs(title = "Beneficiaries by township, as of 2022-06-30",
subtitle = "Townships in grey do not have any partners present",
fill = "Beneficiaries")
fsc %>%
group_by(admin3_pcode = admin3_pcode_old) %>%
summarise(beneficiaries = sum(beneficiaries)) %>%
right_join(pcode3_shape, by = c("admin3_pcode")) %>%
st_as_sf() %>%
ggplot() +
geom_sf(aes(fill = beneficiaries), size = 0.1) +
scale_fill_viridis_c(direction = -1, trans = "log10",
breaks = c(100, 1000, 10000, 100000, 500000),
labels = comma,
na.value = "gray90") +
theme_void() +
theme(legend.text = element_text(size = 10),
legend.title = element_text(size = 10),
legend.key.size = unit(0.7, 'cm'),
plot.background = element_rect(fill = "white", colour = "white")) +
labs(title = "Beneficiaries by township, Q1 & Q2 2022",
subtitle = "townships in grey do not have any partners present",
fill = "Beneficiaries") +
# ggsave("beneficiaries_by_tsp.png", dpi = 300, height = 18, width = 11, units = "in")
pin %>%
right_join(pcode3_shape, by = "admin3_pcode") %>%
st_as_sf() %>%
ggplot() +
geom_sf(aes(fill = fs_targeted), size = .1) +
scale_fill_viridis_c(direction = -1, trans = "log10",
breaks = c(100, 1000, 10000, 100000, 500000),
limits = range(57, 801760),
labels = comma,
na.value = "gray90") +
theme_void() +
theme(legend.text = element_text(size = 10),
legend.title = element_text(size = 10),
legend.key.size = unit(0.7, 'cm'),
plot.background = element_rect(fill = "white", colour = "white")) +
labs(title = "2022 target by township",
subtitle = "townships in grey do not food security targets",
fill = "target")
fsc %>%
group_by(state) %>%
summarise(donors = n_distinct(donor))
fsc %>%
group_by(state) %>%
summarise(donors = n_distinct(donor)) %>%
arrange(desc(donors))
fsc %>%
group_by(state) %>%
summarise(donors = n_distinct(donor),
implementing_partners = n_distinct(org_code)) %>%
arrange(desc(donors)) %>%
kable(caption = "Number of donors by state",
format.args = list(big.mark = ",")) %>%
kable_classic_2("striped", full_width = FALSE)
fsc %>%
filter(is.na(donor))
fsc %>%
filter(is.na(donor)) %>%
group_by(state) %>%
summarise(beneficiaries = sum(new_beneficiaries)) %>%
arrange(desc(beneficiaries))
fsc %>%
filter(is.na(donor)) %>%
group_by(state) %>%
summarise(beneficiaries = sum(new_beneficiaries),
partners = n_distinct(org_code)) %>%
arrange(desc(beneficiaries))
fsc %>%
filter(is.na(donor)) %>%
group_by(state) %>%
summarise(beneficiaries = sum(new_beneficiaries),
partners = n_distinct(org_code)) %>%
arrange(desc(beneficiaries)) %>%
kable(caption = "Reported beneficiaries with missing donor data",
format.args = list(big.mark = ",")) %>%
kable_classic_2("striped", full_width = FALSE)
fsc %>%
filter(is.na(donor)) %>%
group_by(state) %>%
summarise(beneficiaries = sum(new_beneficiaries),
partners = n_distinct(org_code)) %>%
arrange(desc(beneficiaries)) %>%
filter(beneficiaries > 0) %>%
kable(caption = "Reported beneficiaries with missing donor data",
format.args = list(big.mark = ",")) %>%
kable_classic_2("striped", full_width = FALSE)
fsc %>%
group_by(donor) %>%
summarise(beneficiaries = sum(new_beneficiaries)) %>%
mutate(donor = ifelse(is.na(donor), "No donor specified", donor),
donor = ifelse(beneficiaries < 1000, "Other donors", donor)) %>%
group_by(donor) %>%
summarise(beneficiaries = sum(beneficiaries)) %>%
mutate(`%_beneficiaries` = round(beneficiaries / sum(beneficiaries) * 100, digits = 2)) %>%
arrange(desc(`%_beneficiaries`)) %>%
head(15) %>%
kable(caption = "Top donors by beneficiaries reached",
format.args = list(big.mark = ",")) %>%
kable_classic_2("striped", full_width = FALSE)
knitr::opts_chunk$set(echo = FALSE, fig.width=9, message = FALSE, warning=FALSE)
library(tidyverse)
library(readxl)
library(lubridate)
library(stringi)
library(pander)
library(janitor)
library(fuzzyjoin)
library(scales)
library(magrittr)
library(sf)
library(kableExtra)
library(viridis)
library(skimr)
library(plotly)
library(patchwork)
library(broom)
library(DT)
library(here)
library(tidytext)
library(ggforce)
theme_set(theme_light())
# disabling scientific notation
options(scipen = 100)
# pander tables all in one row
panderOptions('table.split.table', Inf)
# pander thousands separator
panderOptions("big.mark", ",")
# replace
opts <- options(knitr.kable.NA = "")
`%out%` <- Negate(`%in%`)
# function for transposing df
transpose_df <- function(df) {
t_df <- data.table::transpose(df)
colnames(t_df) <- rownames(df)
rownames(t_df) <- colnames(df)
t_df <- t_df %>%
tibble::rownames_to_column(.data = .) %>%
tibble::as_tibble(.)
return(t_df)
}
# function beneficiary summaries
sum_ben <- function(df, column_var){
column_var <- enquo(column_var)
df %>%
group_by(!!column_var) %>% # must add bang-bang
summarise(beneficiaries = sum(new_beneficiaries, na.rm = TRUE)) %>%
arrange(desc(beneficiaries))
}
# function beneficiary summaries, 2 grouped variables
sum_ben2 <- function(df, column_var1, column_var2){
column_var1 <- enquo(column_var1)
column_var2 <- enquo(column_var2)
df %>%
group_by(!!column_var1, !!column_var2) %>% # must add bang-bang
summarise(beneficiaries = sum(new_beneficiaries, na.rm = TRUE), .groups = "drop")
}
# scaling functions
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
range_wna <- function(x){(x-min(x, na.rm = TRUE))/(max(x, na.rm = TRUE)-min(x, na.rm = TRUE))}
#mode function
mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
fsc %>%
group_by(quarter, activity_red) %>%
summarise(beneficiaries = sum(new_beneficiaries)) %>%
pivot_wider(values_from = beneficiaries, names_from = quarter, values_fill = 0) %>%
mutate(`%_change` = round((q2 - q1) / q1 * 100, digits = 2),
`%_change` = ifelse(is.infinite(`%_change`), 0, `%_change`)) %>%
rename(Q1 = q1, Q2 = q2,
Activity = activity_red) %>%
arrange(desc(Q2)) %>%
mutate(Total = Q1 + Q2) %>%
pander(caption = "Beneficiaries by activity, Q1 & Q2 2022", style = "grid")
knitr::opts_chunk$set(echo = FALSE, fig.width=9, message = FALSE, warning=FALSE)
library(tidyverse)
library(readxl)
library(lubridate)
library(stringi)
library(pander)
library(janitor)
library(fuzzyjoin)
library(scales)
library(magrittr)
library(sf)
library(kableExtra)
library(viridis)
library(skimr)
library(plotly)
library(patchwork)
library(broom)
library(DT)
library(here)
library(tidytext)
library(ggforce)
theme_set(theme_light())
# disabling scientific notation
options(scipen = 100)
# pander tables all in one row
panderOptions('table.split.table', Inf)
# pander thousands separator
panderOptions("big.mark", ",")
# replace
opts <- options(knitr.kable.NA = "")
`%out%` <- Negate(`%in%`)
# function for transposing df
transpose_df <- function(df) {
t_df <- data.table::transpose(df)
colnames(t_df) <- rownames(df)
rownames(t_df) <- colnames(df)
t_df <- t_df %>%
tibble::rownames_to_column(.data = .) %>%
tibble::as_tibble(.)
return(t_df)
}
# function beneficiary summaries
sum_ben <- function(df, column_var){
column_var <- enquo(column_var)
df %>%
group_by(!!column_var) %>% # must add bang-bang
summarise(beneficiaries = sum(new_beneficiaries, na.rm = TRUE)) %>%
arrange(desc(beneficiaries))
}
# function beneficiary summaries, 2 grouped variables
sum_ben2 <- function(df, column_var1, column_var2){
column_var1 <- enquo(column_var1)
column_var2 <- enquo(column_var2)
df %>%
group_by(!!column_var1, !!column_var2) %>% # must add bang-bang
summarise(beneficiaries = sum(new_beneficiaries, na.rm = TRUE), .groups = "drop")
}
# scaling functions
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
range_wna <- function(x){(x-min(x, na.rm = TRUE))/(max(x, na.rm = TRUE)-min(x, na.rm = TRUE))}
#mode function
mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
fsc <- read_csv("./data/fsc.csv")
fsc_2021 <- read_csv("./data/fsc_2021.csv")
pin <- read_csv("./data/fs_pin.csv")
hd_list <- fsc %>%
group_by(humanitarian_or_development) %>%
summarise(beneficiaries = sum(new_beneficiaries)) %>%
adorn_totals("row") %>%
mutate(pc = round(beneficiaries / sum(beneficiaries) * 100, digits = 2))
# shapefiles
pcode3_shape <- st_read("./mmr_polbnda_adm3_mimu_250k/mmr_polbnda_adm3_mimu_250k.shp", quiet = TRUE) %>%
rename(state = ST,
admin1_pcode = ST_PCODE,
township = TS,
admin3_pcode = TS_PCODE) %>%
mutate(admin3_pcode = ifelse(str_detect(township, "Hlaingtharya"), "MMR013008", admin3_pcode))
pcode1_shape <- st_read("./mmr_polbnda2_adm1_mimu_250k/mmr_polbnda2_adm1_mimu_250k.shp", quiet = TRUE) %>%
rename(state = ST,
admin1_pcode = ST_PCODE) %>% st_as_sf()
