fsc %>%
group_by(state) %>%
summarise(donors = n_distinct(donor))
fsc %>%
group_by(state) %>%
summarise(donors = n_distinct(donor)) %>%
arrange(desc(donors))
fsc %>%
group_by(state) %>%
summarise(donors = n_distinct(donor),
implementing_partners = n_distinct(org_code)) %>%
arrange(desc(donors)) %>%
kable(caption = "Number of donors by state",
format.args = list(big.mark = ",")) %>%
kable_classic_2("striped", full_width = FALSE)
fsc %>%
filter(is.na(donor))
fsc %>%
filter(is.na(donor)) %>%
group_by(state) %>%
summarise(beneficiaries = sum(new_beneficiaries)) %>%
arrange(desc(beneficiaries))
fsc %>%
filter(is.na(donor)) %>%
group_by(state) %>%
summarise(beneficiaries = sum(new_beneficiaries),
partners = n_distinct(org_code)) %>%
arrange(desc(beneficiaries))
fsc %>%
filter(is.na(donor)) %>%
group_by(state) %>%
summarise(beneficiaries = sum(new_beneficiaries),
partners = n_distinct(org_code)) %>%
arrange(desc(beneficiaries)) %>%
kable(caption = "Reported beneficiaries with missing donor data",
format.args = list(big.mark = ",")) %>%
kable_classic_2("striped", full_width = FALSE)
fsc %>%
filter(is.na(donor)) %>%
group_by(state) %>%
summarise(beneficiaries = sum(new_beneficiaries),
partners = n_distinct(org_code)) %>%
arrange(desc(beneficiaries)) %>%
filter(beneficiaries > 0) %>%
kable(caption = "Reported beneficiaries with missing donor data",
format.args = list(big.mark = ",")) %>%
kable_classic_2("striped", full_width = FALSE)
fsc %>%
group_by(donor) %>%
summarise(beneficiaries = sum(new_beneficiaries)) %>%
mutate(donor = ifelse(is.na(donor), "No donor specified", donor),
donor = ifelse(beneficiaries < 1000, "Other donors", donor)) %>%
group_by(donor) %>%
summarise(beneficiaries = sum(beneficiaries)) %>%
mutate(`%_beneficiaries` = round(beneficiaries / sum(beneficiaries) * 100, digits = 2)) %>%
arrange(desc(`%_beneficiaries`)) %>%
head(15) %>%
kable(caption = "Top donors by beneficiaries reached",
format.args = list(big.mark = ",")) %>%
kable_classic_2("striped", full_width = FALSE)
knitr::opts_chunk$set(echo = FALSE, fig.width=9, message = FALSE, warning=FALSE)
library(tidyverse)
library(readxl)
library(lubridate)
library(stringi)
library(pander)
library(janitor)
library(fuzzyjoin)
library(scales)
library(magrittr)
library(sf)
library(kableExtra)
library(viridis)
library(skimr)
library(plotly)
library(patchwork)
library(broom)
library(DT)
library(here)
library(tidytext)
library(ggforce)
theme_set(theme_light())
# disabling scientific notation
options(scipen = 100)
# pander tables all in one row
panderOptions('table.split.table', Inf)
# pander thousands separator
panderOptions("big.mark", ",")
# replace
opts <- options(knitr.kable.NA = "")
`%out%` <- Negate(`%in%`)
# function for transposing df
transpose_df <- function(df) {
t_df <- data.table::transpose(df)
colnames(t_df) <- rownames(df)
rownames(t_df) <- colnames(df)
t_df <- t_df %>%
tibble::rownames_to_column(.data = .) %>%
tibble::as_tibble(.)
return(t_df)
}
# function beneficiary summaries
sum_ben <- function(df, column_var){
column_var <- enquo(column_var)
df %>%
group_by(!!column_var) %>% # must add bang-bang
summarise(beneficiaries = sum(new_beneficiaries, na.rm = TRUE)) %>%
arrange(desc(beneficiaries))
}
# function beneficiary summaries, 2 grouped variables
sum_ben2 <- function(df, column_var1, column_var2){
column_var1 <- enquo(column_var1)
column_var2 <- enquo(column_var2)
df %>%
group_by(!!column_var1, !!column_var2) %>% # must add bang-bang
summarise(beneficiaries = sum(new_beneficiaries, na.rm = TRUE), .groups = "drop")
}
# scaling functions
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
range_wna <- function(x){(x-min(x, na.rm = TRUE))/(max(x, na.rm = TRUE)-min(x, na.rm = TRUE))}
#mode function
mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
fsc %>%
group_by(quarter, activity_red) %>%
summarise(beneficiaries = sum(new_beneficiaries)) %>%
pivot_wider(values_from = beneficiaries, names_from = quarter, values_fill = 0) %>%
mutate(`%_change` = round((q2 - q1) / q1 * 100, digits = 2),
`%_change` = ifelse(is.infinite(`%_change`), 0, `%_change`)) %>%
rename(Q1 = q1, Q2 = q2,
Activity = activity_red) %>%
arrange(desc(Q2)) %>%
mutate(Total = Q1 + Q2) %>%
pander(caption = "Beneficiaries by activity, Q1 & Q2 2022", style = "grid")
knitr::opts_chunk$set(echo = FALSE, fig.width=9, message = FALSE, warning=FALSE)
library(tidyverse)
library(readxl)
library(lubridate)
library(stringi)
library(pander)
library(janitor)
library(fuzzyjoin)
library(scales)
library(magrittr)
library(sf)
library(kableExtra)
library(viridis)
library(skimr)
library(plotly)
library(patchwork)
library(broom)
library(DT)
library(here)
library(tidytext)
library(ggforce)
theme_set(theme_light())
# disabling scientific notation
options(scipen = 100)
# pander tables all in one row
panderOptions('table.split.table', Inf)
# pander thousands separator
panderOptions("big.mark", ",")
# replace
opts <- options(knitr.kable.NA = "")
`%out%` <- Negate(`%in%`)
# function for transposing df
transpose_df <- function(df) {
t_df <- data.table::transpose(df)
colnames(t_df) <- rownames(df)
rownames(t_df) <- colnames(df)
t_df <- t_df %>%
tibble::rownames_to_column(.data = .) %>%
tibble::as_tibble(.)
return(t_df)
}
# function beneficiary summaries
sum_ben <- function(df, column_var){
column_var <- enquo(column_var)
df %>%
group_by(!!column_var) %>% # must add bang-bang
summarise(beneficiaries = sum(new_beneficiaries, na.rm = TRUE)) %>%
arrange(desc(beneficiaries))
}
# function beneficiary summaries, 2 grouped variables
sum_ben2 <- function(df, column_var1, column_var2){
column_var1 <- enquo(column_var1)
column_var2 <- enquo(column_var2)
df %>%
group_by(!!column_var1, !!column_var2) %>% # must add bang-bang
summarise(beneficiaries = sum(new_beneficiaries, na.rm = TRUE), .groups = "drop")
}
# scaling functions
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
range_wna <- function(x){(x-min(x, na.rm = TRUE))/(max(x, na.rm = TRUE)-min(x, na.rm = TRUE))}
#mode function
mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
fsc <- read_csv("./data/fsc.csv")
fsc_2021 <- read_csv("./data/fsc_2021.csv")
pin <- read_csv("./data/fs_pin.csv")
hd_list <- fsc %>%
group_by(humanitarian_or_development) %>%
summarise(beneficiaries = sum(new_beneficiaries)) %>%
adorn_totals("row") %>%
mutate(pc = round(beneficiaries / sum(beneficiaries) * 100, digits = 2))
# shapefiles
pcode3_shape <- st_read("./mmr_polbnda_adm3_mimu_250k/mmr_polbnda_adm3_mimu_250k.shp", quiet = TRUE) %>%
rename(state = ST,
admin1_pcode = ST_PCODE,
township = TS,
admin3_pcode = TS_PCODE) %>%
mutate(admin3_pcode = ifelse(str_detect(township, "Hlaingtharya"), "MMR013008", admin3_pcode))
pcode1_shape <- st_read("./mmr_polbnda2_adm1_mimu_250k/mmr_polbnda2_adm1_mimu_250k.shp", quiet = TRUE) %>%
rename(state = ST,
admin1_pcode = ST_PCODE) %>% st_as_sf()
knitr::opts_chunk$set(echo = FALSE, fig.width=9, message = FALSE, warning=FALSE)
library(tidyverse)
library(readxl)
library(lubridate)
library(stringi)
library(pander)
library(janitor)
library(fuzzyjoin)
library(scales)
library(magrittr)
library(sf)
library(kableExtra)
library(viridis)
library(skimr)
library(plotly)
library(patchwork)
library(broom)
library(DT)
library(here)
library(tidytext)
library(ggforce)
theme_set(theme_light())
# disabling scientific notation
options(scipen = 100)
# pander tables all in one row
panderOptions('table.split.table', Inf)
# pander thousands separator
panderOptions("big.mark", ",")
# replace
opts <- options(knitr.kable.NA = "")
`%out%` <- Negate(`%in%`)
# function for transposing df
transpose_df <- function(df) {
t_df <- data.table::transpose(df)
colnames(t_df) <- rownames(df)
rownames(t_df) <- colnames(df)
t_df <- t_df %>%
tibble::rownames_to_column(.data = .) %>%
tibble::as_tibble(.)
return(t_df)
}
# function beneficiary summaries
sum_ben <- function(df, column_var){
column_var <- enquo(column_var)
df %>%
group_by(!!column_var) %>% # must add bang-bang
summarise(beneficiaries = sum(new_beneficiaries, na.rm = TRUE)) %>%
arrange(desc(beneficiaries))
}
# function beneficiary summaries, 2 grouped variables
sum_ben2 <- function(df, column_var1, column_var2){
column_var1 <- enquo(column_var1)
column_var2 <- enquo(column_var2)
df %>%
group_by(!!column_var1, !!column_var2) %>% # must add bang-bang
summarise(beneficiaries = sum(new_beneficiaries, na.rm = TRUE), .groups = "drop")
}
# scaling functions
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
range_wna <- function(x){(x-min(x, na.rm = TRUE))/(max(x, na.rm = TRUE)-min(x, na.rm = TRUE))}
#mode function
mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
fsc <- read_csv("./data/fsc.csv")
fsc_2021 <- read_csv("./data/fsc_2021.csv")
pin <- read_csv("./data/fs_pin.csv")
hd_list <- fsc %>%
group_by(humanitarian_or_development) %>%
summarise(beneficiaries = sum(new_beneficiaries)) %>%
adorn_totals("row") %>%
mutate(pc = round(beneficiaries / sum(beneficiaries) * 100, digits = 2))
# shapefiles
pcode3_shape <- st_read("./mmr_polbnda_adm3_mimu_250k/mmr_polbnda_adm3_mimu_250k.shp", quiet = TRUE) %>%
rename(state = ST,
admin1_pcode = ST_PCODE,
township = TS,
admin3_pcode = TS_PCODE) %>%
mutate(admin3_pcode = ifelse(str_detect(township, "Hlaingtharya"), "MMR013008", admin3_pcode))
pcode1_shape <- st_read("./mmr_polbnda2_adm1_mimu_250k/mmr_polbnda2_adm1_mimu_250k.shp", quiet = TRUE) %>%
rename(state = ST,
admin1_pcode = ST_PCODE) %>% st_as_sf()
fsc %>%
filter(!is.na(delivery_modality)) %>%
mutate(delivery_modality = case_when(str_detect(delivery_modality, "Hybrid") ~ "Hybrid",
str_detect(delivery_modality, "Service") ~ "Service delivery",
TRUE ~ delivery_modality)) %>%
group_by(activity_red, delivery_modality) %>%
summarise(beneficiaries = sum(new_beneficiaries)) %>%
pivot_wider(names_from = delivery_modality, values_from = beneficiaries) %>%
adorn_percentages("row") %>%
adorn_pct_formatting()
fsc %>%
filter(!is.na(delivery_modality)) %>%
mutate(delivery_modality = case_when(str_detect(delivery_modality, "Hybrid") ~ "Hybrid",
str_detect(delivery_modality, "Service") ~ "Service delivery",
TRUE ~ delivery_modality)) %>%
group_by(activity_red, delivery_modality) %>%
summarise(beneficiaries = sum(new_beneficiaries)) %>%
pivot_wider(names_from = delivery_modality, values_from = beneficiaries) %>%
adorn_percentages("row") %>%
adorn_pct_formatting() %>%
left_join(fsc %>%
filter(!is.na(delivery_modality)) %>%
mutate(delivery_modality = case_when(str_detect(delivery_modality, "Hybrid") ~ "Hybrid",
str_detect(delivery_modality, "Service") ~ "Service delivery",
TRUE ~ delivery_modality)) %>%
group_by(activity_red) %>%
summarise(Beneficiaries = sum(new_beneficiaries)),
by = "activity_red")
fsc %>%
fsc %>%
filter(!is.na(location)) %>%
group_by(location, township, location_type) %>%
summarise(beneficiaries = sum(beneficiaries),
partners = n_distinct(org_code),
.groups = "drop") %>%
filter(location_type == "Village" &
partners >= 2)
fsc %>%
filter(!is.na(location)) %>%
group_by(location, township, location_type) %>%
summarise(beneficiaries = sum(beneficiaries),
partners = n_distinct(org_code),
.groups = "drop") %>%
filter(location_type == "Village" &
partners >= 2)
fsc %>%
filter(!is.na(location)) %>%
group_by(location, township, state, location_type, activity_red) %>%
summarise(beneficiaries = sum(beneficiaries),
partners = n_distinct(org_code),
.groups = "drop") %>%
filter(location_type == "Village" &
partners >= 2)
fsc %>%
filter(!is.na(location)) %>%
group_by(location, township, state, location_type, activity_red) %>%
summarise(beneficiaries = sum(beneficiaries),
partners = n_distinct(org_code),
.groups = "drop") %>%
filter(location_type == "Village" &
partners >= 2) %>%
group_by(state, activity_red) %>%
summarise(beneficiaries = sum(beneficiaries))
fsc %>%
filter(!is.na(location)) %>%
group_by(location, township, state, location_type, activity_red) %>%
summarise(beneficiaries = sum(beneficiaries),
partners = n_distinct(org_code),
.groups = "drop") %>%
filter(location_type == "Village" &
partners >= 2) %>%
group_by(state, activity_red) %>%
summarise(beneficiaries = sum(beneficiaries)) %>%
arrange(desc(beneficiaries))
fsc %>%
filter(!is.na(location)) %>%
group_by(location, township, state, location_type, activity_red) %>%
summarise(beneficiaries = sum(beneficiaries),
partners = n_distinct(org_code),
.groups = "drop") %>%
filter(location_type == "Village" &
partners >= 2) %>%
group_by(state, activity_red) %>%
summarise(beneficiaries = sum(beneficiaries)) %>%
arrange(desc(beneficiaries)) %>%
kable(caption = "Activities conducted in villages with more than one partner",
format.args = list(big.mark = ",")) %>%
kable_classic_2("striped")
fsc %>%
filter(!is.na(location)) %>%
group_by(location, township, state, location_type, activity_red) %>%
summarise(beneficiaries = sum(beneficiaries),
partners = n_distinct(org_code),
.groups = "drop") %>%
filter(location_type == "Village" &
partners >= 2) %>%
group_by(state, activity_red) %>%
summarise(beneficiaries = sum(beneficiaries)) %>%
arrange(desc(beneficiaries)) %>%
kable(caption = "Activities conducted in villages with more than one partner",
format.args = list(big.mark = ",")) %>%
kable_classic_2("striped", full_width = FALSE)
fsc %>%
group_by(quarter, activity_red) %>%
summarise(beneficiaries = sum(new_beneficiaries)) %>%
pivot_wider(values_from = beneficiaries, names_from = quarter, values_fill = 0) %>%
mutate(`%_change` = round((q2 - q1) / q1 * 100, digits = 2),
`%_change` = ifelse(is.infinite(`%_change`), 0, `%_change`),
activity_red = str_to_title(activity_red)) %>%
rename(Q1 = q1, Q2 = q2,
Activity = activity_red) %>%
arrange(desc(Q2)) %>%
mutate(Total = Q1 + Q2) %>%
kable(caption = "Beneficiaries by activity, Q1 & Q2 2022", format.args = list(big.mark = ",")) %>%
kable_classic_2("striped")
fsc %>%
group_by(quarter, activity_red) %>%
summarise(beneficiaries = sum(new_beneficiaries)) %>%
pivot_wider(values_from = beneficiaries, names_from = quarter, values_fill = 0) %>%
mutate(`%_change` = round((q2 - q1) / q1 * 100, digits = 2),
`%_change` = ifelse(is.infinite(`%_change`), 0, `%_change`),
activity_red = ifelse(activity_red %in%
c("FFS and farmer training",
"IGA and small grants"),
activity_red,
str_to_sentence(activity_red))) %>%
rename(Q1 = q1, Q2 = q2,
Activity = activity_red) %>%
arrange(desc(Q2)) %>%
mutate(Total = Q1 + Q2) %>%
kable(caption = "Beneficiaries by activity, Q1 & Q2 2022", format.args = list(big.mark = ",")) %>%
kable_classic_2("striped")
fsc %>%
group_by(quarter, activity_red) %>%
summarise(beneficiaries = sum(new_beneficiaries)) %>%
pivot_wider(values_from = beneficiaries, names_from = quarter, values_fill = 0) %>%
mutate(`%_change` = round((q2 - q1) / q1 * 100, digits = 2),
`%_change` = ifelse(is.infinite(`%_change`), 0, `%_change`),
activity_red = ifelse(activity_red %in%
c("FFS and farmer training",
"IGA and small grants",
"HEB and fortified rice for acute emergencies"),
activity_red,
str_to_sentence(activity_red))) %>%
rename(Q1 = q1, Q2 = q2,
Activity = activity_red) %>%
arrange(desc(Q2)) %>%
mutate(Total = Q1 + Q2) %>%
kable(caption = "Beneficiaries by activity, Q1 & Q2 2022", format.args = list(big.mark = ",")) %>%
kable_classic_2("striped")
fsc %>%
group_by(date, activity_red) %>%
summarise(beneficiaries = sum(beneficiaries)) %>%
rbind(fsc_2021 %>%
# filter(unique_beneficiaries == "Yes") %>%
group_by(date, activity_red) %>%
summarise(beneficiaries = sum(beneficiaries))) %>%
group_by(activity_red) %>%
arrange(date) %>%
mutate(cum_ben = cumsum(beneficiaries)) %>%
arrange(activity_red) %>%
mutate(activity_red = str_replace_all(activity_red, "provision of ", "")) %>%
ggplot(aes(x = date, y = cum_ben, colour = activity_red)) +
geom_vline(colour = "red", lty = 2, xintercept = as.numeric(as.Date("2022-01-01")), alpha = 0.5) +
geom_vline(colour = "black", lty = 2, xintercept = as.numeric(as.Date("2021-06-01")), alpha = 0.5) +
geom_step(size = 0.6) +
scale_x_date(date_breaks = "6 months", date_labels = "%b%y") +
scale_y_continuous(labels = comma) +
facet_wrap(~ activity_red, scales = "free_y") +
theme(legend.position = "none",
axis.text.x = element_text(size = 5, angle = 60, hjust = 1, vjust = 1),
axis.text.y = element_text(size = 5),
strip.text = element_text(size = 6, face = "bold"),
strip.background = element_rect(fill = "#212121")) +
labs(x = "Month",
y = "Cumulative beneficiary frequencies",
title = "Monthly progress by activity, 2021 - 2022 (Q2)",
subtitle = "Figures are in cumulative beneficiary frequencies reached") +
theme(plot.title = element_text(size = 12))
fsc %>%
filter(!is.na(delivery_modality)) %>%
mutate(delivery_modality = case_when(str_detect(delivery_modality, "Hybrid") ~ "Hybrid",
str_detect(delivery_modality, "Service") ~ "Service delivery",
TRUE ~ delivery_modality)) %>%
group_by(activity_red, delivery_modality) %>%
summarise(beneficiaries = sum(new_beneficiaries),
.groups = "drop") %>%
pivot_wider(names_from = delivery_modality, values_from = beneficiaries) %>%
adorn_percentages("row") %>%
adorn_pct_formatting() %>%
left_join(fsc %>%
filter(!is.na(delivery_modality)) %>%
mutate(delivery_modality = case_when(str_detect(delivery_modality, "Hybrid") ~ "Hybrid",
str_detect(delivery_modality, "Service") ~ "Service delivery",
TRUE ~ delivery_modality)) %>%
group_by(activity_red) %>%
summarise(Beneficiaries = sum(new_beneficiaries),
.groups = "drop"),
by = "activity_red") %>%
arrange(desc(Beneficiaries)) %>%
mutate(activity_red = ifelse(activity_red %in%
c("FFS and farmer training",
"IGA and small grants",
"HEB and fortified rice for acute emergencies"),
activity_red,
str_to_sentence(activity_red))) %>%
rename(Activity = activity_red) %>%
mutate_at(vars(`In-kind`, `Service delivery`, `CBT/CVA`, `Hybrid`), ~recode(., "-" = NA_character_)) %>%
kable(caption = "Percentage of beneficiaries reached by activity and delivery modality", format.args = list(big.mark = ",")) %>%
kable_classic_2("striped")
