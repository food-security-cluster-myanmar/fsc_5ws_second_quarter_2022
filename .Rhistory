pc_total = total / sum(total)) %>%
mutate_at(vars(matches("pc")), ~ round(.x * 100, digits = 2)) %>%
arrange(desc(pc_total)) %>%
filter(pc_total >= 1) %>%
select(state, township, Q1 = q1, Q2 = q2,
Total_Jun_2022 = total, `%total` = pc_total) %>%
kable(caption = "Top townships by beneficiaries reached",
format.args = list(big.mark = ",")) %>%
kable_classic_2("striped") %>%
footnote("Only showing townships with >1% of total beneficiaries",)
knitr::opts_chunk$set(echo = TRUE, fig.width=9, message = FALSE, warning=FALSE)
library(tidyverse)
library(readxl)
library(lubridate)
library(stringi)
library(pander)
library(janitor)
library(fuzzyjoin)
library(scales)
library(magrittr)
library(sf)
library(kableExtra)
library(viridis)
library(skimr)
library(plotly)
library(patchwork)
library(broom)
library(DT)
library(here)
theme_set(theme_light())
# disabling scientific notation
options(scipen = 100)
# pander tables all in one row
panderOptions('table.split.table', Inf)
# pander thousands separator
panderOptions("big.mark", ",")
# replace
opts <- options(knitr.kable.NA = "")
`%out%` <- Negate(`%in%`)
# function for transposing df
transpose_df <- function(df) {
t_df <- data.table::transpose(df)
colnames(t_df) <- rownames(df)
rownames(t_df) <- colnames(df)
t_df <- t_df %>%
tibble::rownames_to_column(.data = .) %>%
tibble::as_tibble(.)
return(t_df)
}
# function beneficiary summaries
sum_ben <- function(df, column_var){
column_var <- enquo(column_var)
df %>%
group_by(!!column_var) %>% # must add bang-bang
summarise(beneficiaries = sum(new_beneficiaries, na.rm = TRUE)) %>%
arrange(desc(beneficiaries))
}
# function beneficiary summaries, 2 grouped variables
sum_ben2 <- function(df, column_var1, column_var2){
column_var1 <- enquo(column_var1)
column_var2 <- enquo(column_var2)
df %>%
group_by(!!column_var1, !!column_var2) %>% # must add bang-bang
summarise(beneficiaries = sum(new_beneficiaries, na.rm = TRUE), .groups = "drop")
}
# scaling functions
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
range_wna <- function(x){(x-min(x, na.rm = TRUE))/(max(x, na.rm = TRUE)-min(x, na.rm = TRUE))}
#mode function
mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
pcode4 <- read_excel("./data/2022_FSCMYA_5W_template.xlsx",
sheet = "GEOADMINS") %>%
clean_names() %>%
select(admin1pcode_9:admin1_3) %>%
rename(admin1_pcode = admin1pcode_9,
state = state_10,
township = township_11,
admin3_pcode = admin3pcode_12,
vt_town = vt_and_town_13,
admin4_pcode = vt_and_town_pcode_14) %>%
filter(!is.na(admin4_pcode))
villages <- read_excel("./data/2022_FSCMYA_5W_template.xlsx",
sheet = "GEOADMINS") %>%
clean_names() %>%
select(admin1pcode_17:location_type) %>%
rename(admin1_pcode = admin1pcode_17,
state = state_18,
township = township_19,
admin3_pcode = admin3pcode_20,
vt_town = vt_and_town_21,
admin4_pcode = vt_and_town_pcode_22) %>%
filter(!is.na(location))
camps <- read_excel("./data/2022_FSCMYA_5W_template.xlsx",
sheet = "GEOADMINS") %>%
clean_names() %>%
select(township = township_29, camp_name, pcode_camp = p_code_camp) %>%
filter(!is.na(camp_name))
industrial_zones <- read_excel("./data/2022_FSCMYA_5W_template.xlsx",
sheet = "GEOADMINS") %>%
clean_names() %>%
select(state = state_36, admin1_pcode = admin1pcode_37, industrial_zone = industrial_zones) %>%
filter(!is.na(industrial_zone))
fsc_raw <- read_csv("./data/fsc_q1_q2_2022.csv")
clean_fsc <- function(tbl) {
tbl %>%
rename_all(~str_replace_all(., "^number_of_", "")) %>%
rename_all(~str_replace_all(., "^number_", "")) %>%
rename_all(~str_replace_all(., "reached_", "")) %>%
rename(specify_location = specify_location_if_the_the_location_is_not_in_the_list) %>%
mutate(idp_camp_site_name= as.character(idp_camp_site_name)) %>%
mutate(location = case_when(!is.na(idp_camp_site_name) ~ idp_camp_site_name,
!is.na(village_ward) ~ village_ward,
!is.na(specify_location) ~ specify_location,
!is.na(village_tract_town) ~ village_tract_town)) %>%
mutate(date = my(month_of_implementation),
quarter = ifelse(date >= "2022-04-01", "q2", "q1")) %>%
rename(activity = fsc_main_activity) %>%
mutate(township = recode(township, "Putao" = "Puta-O"),
admin3_pcode = ifelse(township == "Puta-O",
"MMR001014",
admin3_pcode)) %>%
left_join(pcode4 %>% select(township, vt_town,
admin3_pcode, admin4_pcode, admin1_pcode), by =
c("village_tract_town" = "vt_town",
"township" = "township",
"admin3_pcode" = "admin3_pcode",
"admin1_pcode" = "admin1_pcode")) %>%
mutate(total_value_usd = case_when(currency == "MMK" & quarter == "q1" ~ total_value / 1776,
currency == "MMK" & quarter == "q2" ~ total_value / 1850,
currency == "USD" ~ total_value)) %>%
rename(state = state_region,
admin3_pcode_old = ocha_pcode) %>%
# Not necessary as Aung has already prepared it
# mutate(admin3_pcode_old = case_when(admin3_pcode %in%
# c("MMR013046", "MMR013047") ~ "MMR013008",
# admin3_pcode == "MMR015202" ~ "MMR015022",
#                                 admin3_pcode == "MMR015315" ~ "MMR015010",
#                                 admin3_pcode == "MMR015312" ~ "MMR015006",
#                                 admin3_pcode == "MMR015308" ~ "MMR015007",
#                                 admin3_pcode == "MMR016321" ~ "MMR016003",
#                                 TRUE ~ admin3_pcode)) %>%
# removing a duplicate entry from the left join
mutate(drop = case_when(admin4_pcode == "MMR007008058" ~ 1, TRUE ~ 0)) %>%
filter(drop != 1) %>% select(-drop) %>%
rename(response_plan = response_plan_if_project_under_fts) %>%
replace_na(list(new_beneficiaries = 0)) %>%
mutate(activity_red = str_remove_all(activity, "provision of "),
activity_red =
case_when(activity_red %in%
c("food distributions (in kind/voucher/cash), moderate",
"food distributions (in kind/voucher/cash), severe") ~
"food distribution",
activity_red %in%
c("multi-purpose cash transfer (MPC), moderate",
"multi-purpose cash transfer (MPC), severe") ~
"multi-purpose cash transfer",
activity_red == "livelihoods vocational training" ~
"vocational training",
activity_red == "food/cash for work/assets" ~
"food_cash for work_assets",
activity_red == "income-generating activities and small grants" ~
"IGA and small grants",
activity_red == "HEB and fortified rice for acute emergencies" ~
"HEB and fortfied rice",
TRUE ~ activity_red)) %>%
mutate(strat_obj = case_when(activity_red %in%
c("food distribution",
"multi-purpose cash transfer") &
beneficiary_type == "Internally Displaced" ~
"so_1",
activity_red %in% c("food distribution",
"multi-purpose cash transfer") &
beneficiary_type != "Internally Displaced" ~
"so_2",
TRUE ~ "so_3")) %>%
# these partners did not provide the numbers of households
mutate(households = ifelse(is.na(households), beneficiaries, households)) %>%
mutate(usd_per_hhd = total_value_usd / households,
usd_per_person = total_value_usd / beneficiaries) %>%
mutate(usd_hhd_bin = case_when(usd_per_hhd < 10 ~ "<$10",
usd_per_hhd >= 10 & usd_per_hhd < 20 ~ ">=$10_<$20",
usd_per_hhd >= 20 & usd_per_hhd < 30 ~ ">=$20_<$30",
usd_per_hhd >= 30 & usd_per_hhd < 40 ~ ">=$30_<$40",
usd_per_hhd >= 40 & usd_per_hhd < 50 ~ ">=$40_<$50",
usd_per_hhd >= 50 & usd_per_hhd < 60 ~ ">=$50_<$60",
usd_per_hhd >= 60 & usd_per_hhd < 70 ~ ">=$60_<$70",
usd_per_hhd >= 70 & usd_per_hhd < 80 ~ ">=$70_<$80",
usd_per_hhd >= 80 & usd_per_hhd < 90 ~ ">=$80_<$90",
usd_per_hhd >= 90 & usd_per_hhd < 100 ~ ">=$90_<$100",
usd_per_hhd >= 100 ~ ">=$100",
TRUE ~ NA_character_),
usd_hhd_bin = fct_relevel(usd_hhd_bin, c("<$10", ">=$10_<$20",
">=$20_<$30", ">=$30_<$40",
">=$40_<$50",">=$50_<$60",
">=$60_<$70", ">=$70_<$80",
">=$80_<$90",">=$90_<$100",
">=$100"))) %>%
mutate(usd_person_bin = case_when(usd_per_person < 2 ~ "<$2",
usd_per_person >= 2 &
usd_per_person < 4 ~
">=$2_<$4",
usd_per_person >= 4 &
usd_per_person < 6 ~
">=$4_<$6",
usd_per_person >= 6 &
usd_per_person < 8 ~
">=$6_<$8",
usd_per_person >= 8 &
usd_per_person < 10 ~
">=$8_<$10",
usd_per_person >= 10 &
usd_per_person < 12 ~
">=$10_<$12",
usd_per_person >= 12 &
usd_per_person < 14 ~
">=$12_<$14",
usd_per_person >= 14 &
usd_per_person < 16 ~
">=$14_<$16",
usd_per_person >= 16 &
usd_per_person < 18 ~
">=$16_<$18",
usd_per_person >= 18 &
usd_per_person < 20 ~
">=$18_<$20",
usd_per_person >= 20 ~
">=$20",
TRUE ~ NA_character_),
usd_person_bin = fct_relevel(usd_person_bin, c("<$2", ">=$2_<$4",
">=$4_<$6", ">=$6_<$8",
">=$8_<$10",">=$10_<$12",
">=$12_<$14", ">=$14_<$16",
">=$16_<$18", ">=$18_<$20",
">=20"))) %>%
mutate(location_type = recode(location_type, "village" = "Village")) %>%
rename(so = hrp_indicators) %>%
group_by(row_index) %>%
slice(which.max(beneficiaries)) %>%
ungroup() %>%
rename(pwd_male = people_with_disability_male,
pwd_female = people_with_disability_female,
pwd_total = total_number_of_people_with_disability)
}
fsc_raw %>%
clean_fsc() %>%
write_csv("./data/fsc.csv")
knitr::opts_chunk$set(echo = FALSE, fig.width=9, message = FALSE, warning=FALSE)
library(tidyverse)
library(readxl)
library(lubridate)
library(stringi)
library(pander)
library(janitor)
library(fuzzyjoin)
library(scales)
library(magrittr)
library(sf)
library(kableExtra)
library(viridis)
library(skimr)
library(plotly)
library(patchwork)
library(broom)
library(DT)
library(here)
library(tidytext)
library(ggforce)
theme_set(theme_light())
# disabling scientific notation
options(scipen = 100)
# pander tables all in one row
panderOptions('table.split.table', Inf)
# pander thousands separator
panderOptions("big.mark", ",")
# replace
opts <- options(knitr.kable.NA = "")
`%out%` <- Negate(`%in%`)
# function for transposing df
transpose_df <- function(df) {
t_df <- data.table::transpose(df)
colnames(t_df) <- rownames(df)
rownames(t_df) <- colnames(df)
t_df <- t_df %>%
tibble::rownames_to_column(.data = .) %>%
tibble::as_tibble(.)
return(t_df)
}
# function beneficiary summaries
sum_ben <- function(df, column_var){
column_var <- enquo(column_var)
df %>%
group_by(!!column_var) %>% # must add bang-bang
summarise(beneficiaries = sum(new_beneficiaries, na.rm = TRUE),
.groups = "drop") %>%
arrange(desc(beneficiaries))
}
# function beneficiary summaries, 2 grouped variables
sum_ben2 <- function(df, column_var1, column_var2){
column_var1 <- enquo(column_var1)
column_var2 <- enquo(column_var2)
df %>%
group_by(!!column_var1, !!column_var2) %>% # must add bang-bang
summarise(beneficiaries = sum(new_beneficiaries, na.rm = TRUE),
.groups = "drop")
}
# scaling functions
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
range_wna <- function(x){(x-min(x, na.rm = TRUE))/(max(x, na.rm = TRUE)-min(x, na.rm = TRUE))}
#mode function
mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
fsc <- read_csv("./data/fsc.csv")
fsc_2021 <- read_csv("./data/fsc_2021.csv")
pin <- read_csv("./data/fs_pin.csv")
hd_list <- fsc %>%
group_by(humanitarian_or_development, activity_red) %>%
summarise(beneficiaries = sum(new_beneficiaries)) %>%
mutate(hd = ifelse(humanitarian_or_development == "Humanitarian" |
activity_red == "food distribution",
"Humanitarian",
"Development")) %>%
mutate(humanitarian_or_development =
ifelse(activity_red == "multi-purpose cash transfer" &
humanitarian_or_development == "Development",
"Humanitarian", humanitarian_or_development)
) %>%
group_by(hd) %>%
summarise_at("beneficiaries", sum) %>%
mutate(pc = round(beneficiaries / sum(beneficiaries) * 100, digits = 2))
# shapefiles
pcode3_shape <- st_read("./mmr_polbnda_adm3_mimu_250k/mmr_polbnda_adm3_mimu_250k.shp", quiet = TRUE) %>%
rename(state = ST,
admin1_pcode = ST_PCODE,
township = TS,
admin3_pcode = TS_PCODE) %>%
mutate(admin3_pcode = ifelse(str_detect(township, "Hlaingtharya"), "MMR013008", admin3_pcode))
pcode1_shape <- st_read("./mmr_polbnda2_adm1_mimu_250k/mmr_polbnda2_adm1_mimu_250k.shp", quiet = TRUE) %>%
rename(state = ST,
admin1_pcode = ST_PCODE) %>% st_as_sf()
fsc %>%
group_by(org_code) %>%
summarise(beneficiaries == sum(new_beneficiaries))
fsc %>%
group_by(org_code) %>%
summarise(beneficiaries = sum(new_beneficiaries))
fsc %>%
group_by(org_code) %>%
summarise(beneficiaries = sum(new_beneficiaries)) %>%
arrange(desc(beneficiaries))
fsc %>%
group_by(report_org_code) %>%
summarise(beneficiaries = sum(new_beneficiaries)) %>%
arrange(desc(beneficiaries))
fsc %>%
group_by(report_org_code) %>%
filter(humanitarian_or_development == "Humanitarian") %>%
summarise(beneficiaries = sum(new_beneficiaries)) %>%
arrange(desc(beneficiaries))
knitr::opts_chunk$set(echo = FALSE, fig.width=9, message = FALSE, warning=FALSE)
library(tidyverse)
library(readxl)
library(lubridate)
library(stringi)
library(pander)
library(janitor)
library(fuzzyjoin)
library(scales)
library(magrittr)
library(sf)
library(kableExtra)
library(viridis)
library(skimr)
library(plotly)
library(patchwork)
library(broom)
library(DT)
library(here)
library(tidytext)
library(ggforce)
theme_set(theme_light())
# disabling scientific notation
options(scipen = 100)
# pander tables all in one row
panderOptions('table.split.table', Inf)
# pander thousands separator
panderOptions("big.mark", ",")
# replace
opts <- options(knitr.kable.NA = "")
`%out%` <- Negate(`%in%`)
# function for transposing df
transpose_df <- function(df) {
t_df <- data.table::transpose(df)
colnames(t_df) <- rownames(df)
rownames(t_df) <- colnames(df)
t_df <- t_df %>%
tibble::rownames_to_column(.data = .) %>%
tibble::as_tibble(.)
return(t_df)
}
# function beneficiary summaries
sum_ben <- function(df, column_var){
column_var <- enquo(column_var)
df %>%
group_by(!!column_var) %>% # must add bang-bang
summarise(beneficiaries = sum(new_beneficiaries, na.rm = TRUE),
.groups = "drop") %>%
arrange(desc(beneficiaries))
}
# function beneficiary summaries, 2 grouped variables
sum_ben2 <- function(df, column_var1, column_var2){
column_var1 <- enquo(column_var1)
column_var2 <- enquo(column_var2)
df %>%
group_by(!!column_var1, !!column_var2) %>% # must add bang-bang
summarise(beneficiaries = sum(new_beneficiaries, na.rm = TRUE),
.groups = "drop")
}
# scaling functions
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
range_wna <- function(x){(x-min(x, na.rm = TRUE))/(max(x, na.rm = TRUE)-min(x, na.rm = TRUE))}
#mode function
mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
fsc <- read_csv("./data/fsc.csv")
fsc_2021 <- read_csv("./data/fsc_2021.csv")
pin <- read_csv("./data/fs_pin.csv")
hd_list <- fsc %>%
group_by(humanitarian_or_development, activity_red) %>%
summarise(beneficiaries = sum(new_beneficiaries)) %>%
mutate(hd = ifelse(humanitarian_or_development == "Humanitarian" |
activity_red == "food distribution",
"Humanitarian",
"Development")) %>%
mutate(humanitarian_or_development =
ifelse(activity_red == "multi-purpose cash transfer" &
humanitarian_or_development == "Development",
"Humanitarian", humanitarian_or_development)
) %>%
group_by(hd) %>%
summarise_at("beneficiaries", sum) %>%
mutate(pc = round(beneficiaries / sum(beneficiaries) * 100, digits = 2))
# shapefiles
pcode3_shape <- st_read("./mmr_polbnda_adm3_mimu_250k/mmr_polbnda_adm3_mimu_250k.shp", quiet = TRUE) %>%
rename(state = ST,
admin1_pcode = ST_PCODE,
township = TS,
admin3_pcode = TS_PCODE) %>%
mutate(admin3_pcode = ifelse(str_detect(township, "Hlaingtharya"), "MMR013008", admin3_pcode))
pcode1_shape <- st_read("./mmr_polbnda2_adm1_mimu_250k/mmr_polbnda2_adm1_mimu_250k.shp", quiet = TRUE) %>%
rename(state = ST,
admin1_pcode = ST_PCODE) %>% st_as_sf()
fsc %>%
count(beneficiary_type
)
fsc %>%
filter(beneficiary_type == "Internally Displaced") %>%
group(state, quarter) %>%
summarise(beneficiaries = sum(new_beneficiaries)) %>%
arrange(desc(beneficiaries))
fsc %>%
filter(beneficiary_type == "Internally Displaced") %>%
group_by(state, quarter) %>%
summarise(beneficiaries = sum(new_beneficiaries)) %>%
arrange(desc(beneficiaries))
fsc %>%
filter(beneficiary_type == "Internally Displaced") %>%
group_by(state, quarter) %>%
summarise(beneficiaries = sum(new_beneficiaries)) %>%
arrange(desc(beneficiaries)) %>%
ggplot(aes(x = beneficiaries, y = state)) +
geom_col(aes(fill = quarter), position = "dodge")
fsc %>%
filter(activity_red %in% c("crop, vegetable and seed kits",
"FFS and farmer training",
"IGA and small grants",
"livestock kits")) %>%
group_by(activity_red) %>%
summarise(beneficiaries = sum(new_beneficiaries)) %>%
mutate(`%beneficiaries` = round(beneficiaries / sum(beneficiaries) * 100, digits = 2)) %>%
arrange(desc(beneficiaries)) %>%
adorn_totals("row") %>%
rename(activity = actiivity_red) %>%
kable(caption = "Beneficiaries reached by agricultural and livelihood activities",
format.args = list(big.mark = ","),
formal = "html",
table.attr = "style='width:45%;'") %>%
kable_classic_2("striped") %>%
footnote(general = "as of 30 June 2022", general_title = "")
fsc %>%
filter(activity_red %in% c("crop, vegetable and seed kits",
"FFS and farmer training",
"IGA and small grants",
"livestock kits")) %>%
group_by(activity_red) %>%
summarise(beneficiaries = sum(new_beneficiaries)) %>%
mutate(`%beneficiaries` = round(beneficiaries / sum(beneficiaries) * 100, digits = 2)) %>%
arrange(desc(beneficiaries)) %>%
adorn_totals("row") %>%
rename(activity = activity_red) %>%
kable(caption = "Beneficiaries reached by agricultural and livelihood activities",
format.args = list(big.mark = ","),
formal = "html",
table.attr = "style='width:45%;'") %>%
kable_classic_2("striped") %>%
footnote(general = "as of 30 June 2022", general_title = "")
